from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from bot.keyboards.inline import get_goal_keyboard, get_dietary_restrictions_keyboard
from bot.services.database import DatabaseService
import logging

router = Router()
db = DatabaseService()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–µ
GOAL_MAP = {
    'lose_weight': '–ü–æ—Ö—É–¥–µ–Ω–∏–µ',
    'gain_muscle': '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã',
    'maintain': '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ'
}

DIET_MAP = {
    'vegan': '–í–µ–≥–∞–Ω',
    'gluten_free': '–ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞',
    'omnivore': '–í—Å—ë—è–¥–µ–Ω'
}

class ProfileStates(StatesGroup):
    waiting_for_age = State()
    waiting_for_weight = State()
    waiting_for_height = State()
    waiting_for_goal = State()
    waiting_for_dietary_restrictions = State()

@router.message(Command("profile"))
async def cmd_profile(message: Message, state: FSMContext):
    """Start profile setup"""
    # Check if user already has a profile
    existing_profile = db.get_profile(message.from_user.id)
    if existing_profile:
        # Load existing profile data into state
        await state.update_data(
            age=existing_profile['age'],
            weight=existing_profile['weight'],
            height=existing_profile['height']
        )
        await message.answer(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ?",
            reply_markup=get_goal_keyboard()
        )
        await state.set_state(ProfileStates.waiting_for_goal)
        return

    await state.set_state(ProfileStates.waiting_for_age)
    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (15-100):"
    )

@router.message(ProfileStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    """Process age input"""
    try:
        age = int(message.text)
        if not (15 <= age <= 100):
            raise ValueError
        await state.update_data(age=age)
        await state.set_state(ProfileStates.waiting_for_weight)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (30-180):"
        )
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (15-100):"
        )

@router.message(ProfileStates.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    """Process weight input"""
    try:
        weight = int(message.text)
        if not (30 <= weight <= 180):
            raise ValueError
        await state.update_data(weight=weight)
        await state.set_state(ProfileStates.waiting_for_height)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (140-200):"
        )
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-180 –∫–≥):"
        )

@router.message(ProfileStates.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    """Process height input"""
    try:
        height = int(message.text)
        if not (140 <= height <= 200):
            raise ValueError
        await state.update_data(height=height)
        await state.set_state(ProfileStates.waiting_for_goal)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
            reply_markup=get_goal_keyboard()
        )
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (140-200 —Å–º):"
        )

@router.callback_query(ProfileStates.waiting_for_goal)
async def process_goal(callback: CallbackQuery, state: FSMContext):
    """Process goal selection"""
    try:
        goal = callback.data.split(":")[1]
        logging.info(f"Selected goal: {goal}")
        await state.update_data(goal=goal)
        await state.set_state(ProfileStates.waiting_for_dietary_restrictions)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—â–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:",
            reply_markup=get_dietary_restrictions_keyboard()
        )
    except Exception as e:
        logging.error(f"Error in process_goal: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()

@router.callback_query(ProfileStates.waiting_for_dietary_restrictions)
async def process_dietary_restrictions(callback: CallbackQuery, state: FSMContext):
    """Process dietary restrictions selection"""
    try:
        # Get the dietary restriction from callback data
        dietary_restrictions = callback.data.split(":")[1]
        logging.info(f"Selected dietary restrictions: {dietary_restrictions}")
        
        # Get all profile data
        profile_data = await state.get_data()
        logging.info(f"Current profile data: {profile_data}")
        
        # Save profile to database
        if db.save_profile(callback.from_user.id, profile_data):
            logging.info("Profile saved successfully")
            # Create profile summary message with readable values
            profile_summary = (
                "‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                f"üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"üë§ –í–æ–∑—Ä–∞—Å—Ç: {profile_data['age']} –ª–µ—Ç\n"
                f"‚öñÔ∏è –í–µ—Å: {profile_data['weight']} –∫–≥\n"
                f"üìè –†–æ—Å—Ç: {profile_data['height']} —Å–º\n"
                f"üéØ –¶–µ–ª—å: {GOAL_MAP.get(profile_data['goal'], profile_data['goal'])}\n"
                f"ü•ó –ü–∏—â–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {DIET_MAP.get(dietary_restrictions, dietary_restrictions)}\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /profile"
            )
            
            await callback.message.answer(
                profile_summary,
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            logging.error("Failed to save profile")
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardRemove()
            )
    except Exception as e:
        logging.error(f"Error in process_dietary_restrictions: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
    
    await state.clear() 