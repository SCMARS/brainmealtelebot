from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.filters import Command
from bot.services.database import DatabaseService
from bot.keyboards.inline import get_subscription_keyboard
from bot.config import (
    PAYMENT_TOKEN,
    SUBSCRIPTION_PRICES,
    SUBSCRIPTION_TITLES,
    SUBSCRIPTION_DESCRIPTIONS,
    SUBSCRIPTION_DURATIONS
)
import logging

router = Router()
db = DatabaseService()

@router.message(Command("subscribe"))
async def cmd_subscribe(message: Message):
    """Show subscription options"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ –ª–æ–∫–∞–ª–∏
    user_language = message.from_user.language_code
    is_ukrainian = user_language == 'uk'
    
    currency = 'UAH' if is_ukrainian else 'RUB'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    if is_ukrainian:
        text = (
            "üåü –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–µ–º—ñ—É–º-—Ñ—É–Ω–∫—Ü—ñ—ó:\n\n"
            "‚úÖ –ù–µ–æ–±–º–µ–∂–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–ª–∞–Ω—ñ–≤\n"
            "‚úÖ –î–æ—Å—Ç—É–ø –¥–æ —Ç–∏–∂–Ω–µ–≤–∏—Ö –ø–ª–∞–Ω—ñ–≤\n"
            "‚úÖ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n\n"
            "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:"
        )
    else:
        text = (
            "üåü –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏:\n\n"
            "‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤\n"
            "‚úÖ –î–æ—Å—Ç—É–ø –∫ –Ω–µ–¥–µ–ª—å–Ω—ã–º –ø–ª–∞–Ω–∞–º\n"
            "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
        )
    
    await message.answer(
        text,
        reply_markup=get_subscription_keyboard(currency)
    )

@router.callback_query(F.data.startswith("subscribe:"))
async def process_subscription(callback: CallbackQuery):
    """Process subscription selection"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_language = callback.from_user.language_code
    is_ukrainian = user_language == 'uk'
    currency = 'UAH' if is_ukrainian else 'RUB'
    
    plan = callback.data.split(":")[1]
    
    if plan not in SUBSCRIPTION_PRICES[currency]:
        await callback.message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏" if not is_ukrainian else "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∞—Ä–∏—Ñ –ø—ñ–¥–ø–∏—Å–∫–∏"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
    await callback.message.answer_invoice(
        title=SUBSCRIPTION_TITLES[currency][plan],
        description=SUBSCRIPTION_DESCRIPTIONS[currency][plan],
        provider_token=PAYMENT_TOKEN,
        currency=currency,
        prices=[
            LabeledPrice(
                label=SUBSCRIPTION_TITLES[currency][plan],
                amount=SUBSCRIPTION_PRICES[currency][plan]
            )
        ],
        payload=f"subscription:{plan}:{currency}"
    )

@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    """Process pre-checkout query"""
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    """Process successful payment"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –≤–∞–ª—é—Ç—É –∏–∑ payload
        _, plan, currency = message.successful_payment.invoice_payload.split(":")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ
        if db.update_subscription(
            message.from_user.id,
            plan,
            SUBSCRIPTION_DURATIONS[plan]
        ):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_language = message.from_user.language_code
            is_ukrainian = user_language == 'uk'
            
            if is_ukrainian:
                success_message = (
                    "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ñ –≤—Å—ñ –ø—Ä–µ–º—ñ—É–º-—Ñ—É–Ω–∫—Ü—ñ—ó.\n\n"
                    "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:\n"
                    "‚Ä¢ –ù–µ–æ–±–º–µ–∂–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –ø–ª–∞–Ω—ñ–≤\n"
                    "‚Ä¢ –î–æ—Å—Ç—É–ø –¥–æ —Ç–∏–∂–Ω–µ–≤–∏—Ö –ø–ª–∞–Ω—ñ–≤\n"
                    "‚Ä¢ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É"
                )
            else:
                success_message = (
                    "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏.\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
                    "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–æ–≤\n"
                    "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –Ω–µ–¥–µ–ª—å–Ω—ã–º –ø–ª–∞–Ω–∞–º\n"
                    "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É"
                )
            
            await message.answer(success_message)
        else:
            error_message = (
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                if not is_ukrainian else
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å–∫–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
            )
            await message.answer(error_message)
    except Exception as e:
        logging.error(f"Error processing payment: {e}")
        error_message = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            if not is_ukrainian else
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–ª–∞—Ç–µ–∂—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
        )
        await message.answer(error_message) 