from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from bot.services.database import DatabaseService
from datetime import datetime, timedelta

router = Router()
db = DatabaseService()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–µ
GOAL_MAP = {
    'lose_weight': '–ü–æ—Ö—É–¥–µ–Ω–∏–µ',
    'gain_muscle': '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã',
    'maintain': '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ'
}

DIET_MAP = {
    'vegan': '–í–µ–≥–∞–Ω',
    'gluten_free': '–ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞',
    'omnivore': '–í—Å—ë—è–¥–µ–Ω'
}

PLAN_TYPE_MAP = {
    'daily': '–î–Ω–µ–≤–Ω–æ–π –ø–ª–∞–Ω',
    'weekly': '–ù–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω'
}

@router.message(Command("analytics"))
async def cmd_analytics(message: Message):
    """Show basic analytics"""
    user_id = message.from_user.id
    
    # Get user profile
    profile = db.get_profile(user_id)
    if not profile:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /profile"
        )
        return
    
    # Get subscription status
    is_subscribed = db.get_subscription_status(user_id)
    
    # Get generation history
    history = db.get_generation_history(user_id)
    total_generations = len(history)
    last_week_generations = len([h for h in history if datetime.fromtimestamp(h['timestamp']) > datetime.now() - timedelta(days=7)])
    
    # Count plan types
    plan_types = {}
    for h in history:
        plan_type = PLAN_TYPE_MAP.get(h['plan_type'], h['plan_type'])
        plan_types[plan_type] = plan_types.get(plan_type, 0) + 1
    
    # Create analytics message
    analytics = (
        "üìä –í–∞—à–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:\n\n"
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {profile['age']} –ª–µ—Ç\n"
        f"‚Ä¢ –í–µ—Å: {profile['weight']} –∫–≥\n"
        f"‚Ä¢ –†–æ—Å—Ç: {profile['height']} —Å–º\n"
        f"‚Ä¢ –¶–µ–ª—å: {GOAL_MAP.get(profile['goal'], profile['goal'])}\n"
        f"‚Ä¢ –ü–∏—â–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {DIET_MAP.get(profile['dietary_restrictions'], profile['dietary_restrictions'])}\n\n"
        f"üåü –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {'–ê–∫—Ç–∏–≤–Ω–∞' if is_subscribed else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
        f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_generations}\n"
        f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {last_week_generations}\n\n"
        f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –ø–ª–∞–Ω–æ–≤:\n"
    )
    
    for plan_type, count in plan_types.items():
        analytics += f"‚Ä¢ {plan_type}: {count}\n"
    
    analytics += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /detailed_analytics –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    
    await message.answer(analytics)

@router.message(Command("detailed_analytics"))
async def cmd_detailed_analytics(message: Message):
    """Show detailed analytics"""
    user_id = message.from_user.id
    
    # Get user profile
    profile = db.get_profile(user_id)
    if not profile:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /profile"
        )
        return
    
    # Get subscription status
    is_subscribed = db.get_subscription_status(user_id)
    
    # Get generation history
    history = db.get_generation_history(user_id)
    
    # Analyze by day of week
    days_of_week = {0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–í—Ç–æ—Ä–Ω–∏–∫', 2: '–°—Ä–µ–¥–∞', 
                   3: '–ß–µ—Ç–≤–µ—Ä–≥', 4: '–ü—è—Ç–Ω–∏—Ü–∞', 5: '–°—É–±–±–æ—Ç–∞', 6: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}
    day_stats = {day: 0 for day in days_of_week.values()}
    
    for h in history:
        day = datetime.fromtimestamp(h['timestamp']).weekday()
        day_stats[days_of_week[day]] += 1
    
    # Analyze by time of day
    time_stats = {'—É—Ç—Ä–æ': 0, '–¥–µ–Ω—å': 0, '–≤–µ—á–µ—Ä': 0, '–Ω–æ—á—å': 0}
    for h in history:
        hour = datetime.fromtimestamp(h['timestamp']).hour
        if 5 <= hour < 12:
            time_stats['—É—Ç—Ä–æ'] += 1
        elif 12 <= hour < 17:
            time_stats['–¥–µ–Ω—å'] += 1
        elif 17 <= hour < 23:
            time_stats['–≤–µ—á–µ—Ä'] += 1
        else:
            time_stats['–Ω–æ—á—å'] += 1
    
    # Create detailed analytics message
    analytics = (
        "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:\n\n"
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {profile['age']} –ª–µ—Ç\n"
        f"‚Ä¢ –í–µ—Å: {profile['weight']} –∫–≥\n"
        f"‚Ä¢ –†–æ—Å—Ç: {profile['height']} —Å–º\n"
        f"‚Ä¢ –¶–µ–ª—å: {GOAL_MAP.get(profile['goal'], profile['goal'])}\n"
        f"‚Ä¢ –ü–∏—â–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {DIET_MAP.get(profile['dietary_restrictions'], profile['dietary_restrictions'])}\n\n"
        f"üåü –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {'–ê–∫—Ç–∏–≤–Ω–∞' if is_subscribed else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
        f"üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:\n"
    )
    
    for day, count in day_stats.items():
        analytics += f"‚Ä¢ {day}: {count}\n"
    
    analytics += f"\n‚è∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫:\n"
    for time, count in time_stats.items():
        analytics += f"‚Ä¢ {time}: {count}\n"
    
    if len(history) > 1:
        dates = [datetime.fromtimestamp(h['timestamp']) for h in history]
        dates.sort()
        avg_days = (dates[-1] - dates[0]).days / (len(dates) - 1)
        analytics += f"\nüìÖ –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {avg_days:.1f} –¥–Ω–µ–π"
    
    await message.answer(analytics)
