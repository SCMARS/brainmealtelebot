from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from bot.services.database import DatabaseService
from datetime import datetime, timedelta
import logging

router = Router()
db = DatabaseService()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–µ
GOAL_MAP = {
    'lose_weight': '–ü–æ—Ö—É–¥–µ–Ω–∏–µ',
    'gain_muscle': '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã',
    'maintain': '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ'
}

PLAN_TYPE_MAP = {
    'daily': '–î–Ω–µ–≤–Ω–æ–π –ø–ª–∞–Ω',
    'weekly': '–ù–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω'
}

@router.message(Command("analytics"))
async def cmd_analytics(message: Message):
    """Show basic analytics"""
    logging.info(f"Received /analytics command from user {message.from_user.id}")
    try:
        user_id = message.from_user.id
        
        # Get user profile
        profile = db.get_profile(user_id)
        if not profile:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /profile"
            )
            return
        
        # Get subscription status
        is_subscribed = db.get_subscription_status(user_id)
        
        # Get generation history
        history = db.get_generation_history(user_id)
        total_generations = len(history)
        last_week_generations = len([h for h in history if datetime.fromtimestamp(h['timestamp']) > datetime.now() - timedelta(days=7)])
        
        # Count plan types
        plan_types = {}
        for h in history:
            plan_type = PLAN_TYPE_MAP.get(h['plan_type'], h['plan_type'])
            plan_types[plan_type] = plan_types.get(plan_type, 0) + 1
        
        # Create analytics message
        analytics = (
            "üìä *–í–ê–®–ê –ê–ù–ê–õ–ò–¢–ò–ö–ê:*\n\n"
            f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*\n"
            f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: *{profile['age']} –ª–µ—Ç*\n"
            f"‚Ä¢ –í–µ—Å: *{profile['weight']} –∫–≥*\n"
            f"‚Ä¢ –†–æ—Å—Ç: *{profile['height']} —Å–º*\n"
            f"‚Ä¢ –¶–µ–ª—å: *{GOAL_MAP.get(profile['goal'], profile['goal'])}*\n\n"
            f"üåü *–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:* {'–ê–∫—Ç–∏–≤–Ω–∞' if is_subscribed else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
            f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:*\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: *{total_generations}*\n"
            f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: *{last_week_generations}*\n\n"
            f"üìä *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –ø–ª–∞–Ω–æ–≤:*\n"
        )
        
        for plan_type, count in plan_types.items():
            analytics += f"‚Ä¢ {plan_type}: *{count}*\n"
        
        analytics += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /detailed_analytics –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        
        await message.answer(analytics, parse_mode="Markdown")
        logging.info(f"Successfully sent analytics to user {user_id}")
    except Exception as e:
        logging.error(f"Error in cmd_analytics: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("detailed_analytics"))
async def cmd_detailed_analytics(message: Message):
    """Show detailed analytics"""
    logging.info(f"Received /detailed_analytics command from user {message.from_user.id}")
    try:
        user_id = message.from_user.id
        
        # Get user profile
        profile = db.get_profile(user_id)
        if not profile:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /profile"
            )
            return
        
        # Get subscription status
        is_subscribed = db.get_subscription_status(user_id)
        
        # Get generation history
        history = db.get_generation_history(user_id)
        
        # Count generations by day of week
        day_stats = {
            '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0,
            '–í—Ç–æ—Ä–Ω–∏–∫': 0,
            '–°—Ä–µ–¥–∞': 0,
            '–ß–µ—Ç–≤–µ—Ä–≥': 0,
            '–ü—è—Ç–Ω–∏—Ü–∞': 0,
            '–°—É–±–±–æ—Ç–∞': 0,
            '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 0
        }
        
        # Count generations by time of day
        time_stats = {
            '–£—Ç—Ä–æ (6-12)': 0,
            '–î–µ–Ω—å (12-18)': 0,
            '–í–µ—á–µ—Ä (18-24)': 0,
            '–ù–æ—á—å (0-6)': 0
        }
        
        for h in history:
            dt = datetime.fromtimestamp(h['timestamp'])
            day_stats[dt.strftime('%A')] += 1
            
            hour = dt.hour
            if 6 <= hour < 12:
                time_stats['–£—Ç—Ä–æ (6-12)'] += 1
            elif 12 <= hour < 18:
                time_stats['–î–µ–Ω—å (12-18)'] += 1
            elif 18 <= hour < 24:
                time_stats['–í–µ—á–µ—Ä (18-24)'] += 1
            else:
                time_stats['–ù–æ—á—å (0-6)'] += 1
        
        # Create detailed analytics message
        analytics = (
            "üìä *–î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:*\n\n"
            f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*\n"
            f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: *{profile['age']} –ª–µ—Ç*\n"
            f"‚Ä¢ –í–µ—Å: *{profile['weight']} –∫–≥*\n"
            f"‚Ä¢ –†–æ—Å—Ç: *{profile['height']} —Å–º*\n"
            f"‚Ä¢ –¶–µ–ª—å: *{GOAL_MAP.get(profile['goal'], profile['goal'])}*\n\n"
            f"üåü *–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:* {'–ê–∫—Ç–∏–≤–Ω–∞' if is_subscribed else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
            f"üìà *–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:*\n"
        )
        
        for day, count in day_stats.items():
            analytics += f"‚Ä¢ {day}: *{count}*\n"
        
        analytics += f"\n‚è∞ *–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫:*\n"
        for time, count in time_stats.items():
            analytics += f"‚Ä¢ {time}: *{count}*\n"
        
        if len(history) > 1:
            dates = [datetime.fromtimestamp(h['timestamp']) for h in history]
            dates.sort()
            avg_days = (dates[-1] - dates[0]).days / (len(dates) - 1)
            analytics += f"\nüìÖ *–°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:* {avg_days:.1f} –¥–Ω–µ–π"
        
        await message.answer(analytics, parse_mode="Markdown")
        logging.info(f"Successfully sent detailed analytics to user {user_id}")
    except Exception as e:
        logging.error(f"Error in cmd_detailed_analytics: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
