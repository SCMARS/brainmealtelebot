from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.services.database import DatabaseService
from bot.services.gemini import GeminiService
from bot.keyboards.inline import get_meal_type_keyboard

router = Router()
db = DatabaseService()
gemini = GeminiService()

class GenerateStates(StatesGroup):
    waiting_for_meal_type = State()
    waiting_for_calories = State()

@router.message(Command("generateforday"))
async def cmd_generate_day(message: Message, state: FSMContext):
    """Start daily meal plan generation"""
    # Check if user has a profile
    profile = db.get_profile(message.from_user.id)
    if not profile:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /profile"
        )
        return

    await state.set_state(GenerateStates.waiting_for_meal_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:",
        reply_markup=get_meal_type_keyboard()
    )

@router.message(Command("generateforweek"))
async def cmd_generate_week(message: Message, state: FSMContext):
    """Start weekly meal plan generation"""
    # Check if user has a profile
    profile = db.get_profile(message.from_user.id)
    if not profile:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /profile"
        )
        return

    # Check subscription
    if not db.get_subscription_status(message.from_user.id):
        await message.answer(
            "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."
        )
        return

    await state.set_state(GenerateStates.waiting_for_meal_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:",
        reply_markup=get_meal_type_keyboard()
    )

@router.callback_query(GenerateStates.waiting_for_meal_type)
async def process_meal_type(callback: CallbackQuery, state: FSMContext):
    """Process meal type selection"""
    meal_type = callback.data.split(":")[1]
    await state.update_data(meal_type=meal_type)
    await state.set_state(GenerateStates.waiting_for_calories)
    
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2000):"
    )

@router.message(GenerateStates.waiting_for_calories)
async def process_calories(message: Message, state: FSMContext):
    """Process calories input and generate meal plan"""
    try:
        calories = int(message.text)
        if not (1000 <= calories <= 5000):
            raise ValueError
            
        # Get user profile
        profile = db.get_profile(message.from_user.id)
        if not profile:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
            await state.clear()
            return
            
        # Get meal type from state
        data = await state.get_data()
        meal_type = data.get('meal_type', 'balanced')
        
        # Check if this is a weekly plan
        is_weekly = message.text.startswith('/generateforweek')
        
        # Check subscription for weekly plan
        if is_weekly and not db.get_subscription_status(message.from_user.id):
            await message.answer(
                "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."
            )
            await state.clear()
            return
        
        # Generate meal plan
        await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...")
        
        prompt = f"""
        –°–æ–∑–¥–∞–π {'–Ω–µ–¥–µ–ª—å–Ω—ã–π' if is_weekly else '–¥–Ω–µ–≤–Ω–æ–π'} –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
        - –í–æ–∑—Ä–∞—Å—Ç: {profile['age']} –ª–µ—Ç
        - –í–µ—Å: {profile['weight']} –∫–≥
        - –†–æ—Å—Ç: {profile['height']} —Å–º
        - –¶–µ–ª—å: {profile['goal']}
        - –ü–∏—â–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {profile['dietary_restrictions']}
        - –ö–∞–ª–æ—Ä–∏–∏ –≤ –¥–µ–Ω—å: {calories}
        - –¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è: {meal_type}
        
        –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
        1. –ó–∞–≤—Ç—Ä–∞–∫
        2. –û–±–µ–¥
        3. –£–∂–∏–Ω
        4. –ü–µ—Ä–µ–∫—É—Å—ã (2-3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)
        
        –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ —É–∫–∞–∂–∏:
        - –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π
        - –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å–æ—Å—Ç–∞–≤
        - –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å —ç–º–æ–¥–∑–∏.
        """
        
        meal_plan = await gemini.generate_text(prompt)
        
        # Save generation history
        db.save_generation(
            message.from_user.id,
            'weekly' if is_weekly else 'daily',
            calories
        )
        
        # Split long message if needed
        if len(meal_plan) > 4000:
            parts = [meal_plan[i:i+4000] for i in range(0, len(meal_plan), 4000)]
            for part in parts:
                await message.answer(part)
        else:
            await message.answer(meal_plan)
            
        await state.clear()
        
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π (1000-5000):"
        ) 