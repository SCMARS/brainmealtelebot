import google.generativeai as genai
from bot.config import GEMINI_API_KEY
import logging
import asyncio

genai.configure(api_key=GEMINI_API_KEY)

class GeminiService:
    @staticmethod
    async def generate_meal_plan(profile: dict, days: int, existing_meals: list = None) -> str:
        """Generate meal plan using Gemini API"""
        try:
            # Validate profile
            required_fields = ['age', 'gender', 'weight', 'height', 'goal']
            missing_fields = [field for field in required_fields if field not in profile]
            if missing_fields:
                return f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing_fields)}"

            # Create model for each request
            model = genai.GenerativeModel ('gemini-1.5-flash')
            
            # Format existing meals info
            existing_meals_info = ""
            if existing_meals and len(existing_meals) > 0:
                existing_meals_info = "\n–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏:\n"
                for meal in existing_meals:
                    existing_meals_info += f"- {meal['type']}: {meal['name']} ({meal['calories']} –∫–∫–∞–ª, {meal['protein']}–≥ –±–µ–ª–∫–∞, {meal['carbs']}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤, {meal['fat']}–≥ –∂–∏—Ä–æ–≤)\n"

            # Convert gender to readable format
            gender_display = "–º—É–∂—Å–∫–æ–π" if profile['gender'] == 'male' else "–∂–µ–Ω—Å–∫–∏–π"

            prompt = f"""–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ {days} {'–¥–µ–Ω—å' if days == 1 else '–¥–Ω—è'} –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
- –í–æ–∑—Ä–∞—Å—Ç: {profile['age']} –ª–µ—Ç
- –ü–æ–ª: {gender_display}
- –í–µ—Å: {profile['weight']} –∫–≥
- –†–æ—Å—Ç: {profile['height']} —Å–º
- –¶–µ–ª—å: {profile['goal']}
- –ö–∞–ª–æ—Ä–∏–∏ –≤ –¥–µ–Ω—å: {profile.get('calories', 2000)}
- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ: {profile.get('food_preferences', '–Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π')}
- –ê–ª–ª–µ—Ä–≥–∏–∏: {profile.get('allergies', '–Ω–µ—Ç')}
- –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {profile.get('activity_level', '—É–º–µ—Ä–µ–Ω–Ω—ã–π')}{existing_meals_info}

–ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
1. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ (–∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω, –ø–µ—Ä–µ–∫—É—Å—ã)
2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:
   - –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
   - –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
   - –ö–∞–ª–æ—Ä–∏–∏
   - –ë–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã
   - –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞
3. –û–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é

–í–ê–ñ–ù–û: 
1. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–∫—Å—Ç–∞, —É–¥–æ–±–Ω–æ–º –¥–ª—è —á—Ç–µ–Ω–∏—è –≤ Telegram
2. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
3. –†–∞–∑–¥–µ–ª—è–π –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∏ –¥–Ω–∏ —á–µ—Ç–∫–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
4. –î–æ–±–∞–≤–ª—è–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
5. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é

–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:
üçΩÔ∏è –î–ï–ù–¨ 1

üç≥ –ó–ê–í–¢–†–ê–ö (08:00)
‚Ä¢ –û–≤—Å—è–Ω–∞—è –∫–∞—à–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: 350 –∫–∫–∞–ª
‚Ä¢ –ë–ñ–£: 12–≥ –±–µ–ª–∫–æ–≤, 60–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤, 8–≥ –∂–∏—Ä–æ–≤
‚Ä¢ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: –æ–≤—Å—è–Ω–∫–∞, –º–æ–ª–æ–∫–æ, –±–∞–Ω–∞–Ω, –º–µ–¥

üç≤ –û–ë–ï–î (13:00)
‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: 450 –∫–∫–∞–ª
‚Ä¢ –ë–ñ–£: 35–≥ –±–µ–ª–∫–æ–≤, 50–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤, 10–≥ –∂–∏—Ä–æ–≤
‚Ä¢ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞, —Ä–∏—Å, –æ–≤–æ—â–∏

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –î–ï–ù–¨:
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: 2000 –∫–∫–∞–ª
‚Ä¢ –ë–µ–ª–∫–∏: 120–≥
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 200–≥
‚Ä¢ –ñ–∏—Ä—ã: 50–≥

üë®‚Äçüç≥ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é..."""
            
            logging.info(f"Generating meal plan with prompt: {prompt}")
            
            # Use asyncio for async call
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(None, lambda: model.generate_content(prompt))
            
            if not response or not response.text:
                logging.error("Empty response from Gemini API")
                return "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            return response.text
            
        except Exception as e:
            logging.error(f"Error generating meal plan: {str(e)}")
            return "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." 